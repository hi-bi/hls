openapi: 3.0.0

info:
  title: Home Library Service
  description: Home music library service
  version: '1.0.0'
  contact: {}
tags: []
servers: []

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        login:
          type: string
          example: 'TestUser'
        version:
          type: number
          example: 1
        createAt:
          type: number
          example: 1655000000
        updateAt:
          type: number
          example: 1655000000
      required:
        - id
        - login
    Artist:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: 'Freddie Mercury'
        grammy:
          type: boolean
          example: false
      required:
        - id
        - name
    Album:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: 'Innuendo'
        year:
          type: integer
          example: 1991
        artistId:
          type: string
          format: uuid
          nullable: true
      required:
        - id
        - name
    Track:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: The Show Must Go On
        artistId:
          type: string
          format: uuid
          nullable: true
        albumId:
          type: string
          format: uuid
          nullable: true
        duration:
          type: integer
          description: In seconds
          example: 262
      required:
        - id
        - name
        - duration
    Favorites:
      type: object
      properties:
        artists:
          type: array
          items:
            $ref: '#/components/schemas/Artist'
        albums:
          type: array
          items:
            $ref: '#/components/schemas/Album'
        tracks:
          type: array
          items:
            $ref: '#/components/schemas/Track'
    CreateAlbumDto:
      type: object
      properties:
        name:
          type: string
          description: Album name
        year:
          type: number
          description: Album year
        artistId:
          type: string
          description: Artist id
      required:
        - name
        - year
        - artistId
    UpdateAlbumDto:
      type: object
      properties:
        name:
          type: string
          description: Album name
        year:
          type: string
          description: Album year
        artistId:
          type: string
          description: Artist id
      required:
        - name
        - year
        - artistId
    CreateArtistDto:
      type: object
      properties:
        name:
          type: string
          description: Artist name
        grammy:
          type: boolean
          description: Grammy
      required:
        - name
        - grammy
    UpdateArtistDto:
      type: object
      properties:
        name:
          type: string
          description: Artist name
        grammy:
          type: boolean
          description: Grammy
      required:
        - name
        - grammy
    CreateTrackDto:
      type: object
      properties:
        name:
          type: string
          description: Track name
        artistId:
          type: string
          description: Artist id
        albumId:
          type: string
          description: Album id
        duration:
          type: number
          description: Track duration
      required:
        - name
        - artistId
        - albumId
        - duration
    UpdateTrackDto:
      type: object
      properties:
        name:
          type: string
          description: Track name
        artistId:
          type: string
          description: Artist id
        albumId:
          type: string
          description: Album id
        duration:
          type: number
          description: Track duration
      required:
        - name
        - artistId
        - albumId
        - duration
    CreateUserDto:
      type: object
      properties:
        login:
          type: string
          description: User login
        password:
          type: string
          description: User password
      required:
        - login
        - password
    UpdateUserDto:
      type: object
      properties:
        oldPassword:
          type: string
          description: previous password
        newPassword:
          type: string
          description: new password
      required:
        - oldPassword
        - newPassword

paths:
  /:
    get:
      operationId: AppController_getHello
      parameters: []
      responses:
        '200':
          description: ''
  /album:
    get:
      operationId: AlbumController_getAll
      parameters: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'

      tags:
        - album
    post:
      operationId: AlbumController_createAlbum
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAlbumDto'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
        '400':
          description: >-
            Bad request. Body does not contain required fields or Artist was not
            found
      tags:
        - album
  /album/{id}:
    get:
      operationId: AlbumController_getById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad request. id must be a UUID
        '404':
          description: Album was not found
      tags:
        - album
    put:
      operationId: AlbumController_updateAlbum
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAlbumDto'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
        '400':
          description: >-
            Bad request. Body does not contain required fields or Artist was not
            found
        '404':
          description: Record with id === albumId does not exist
      tags:
        - album
    delete:
      operationId: AlbumController_deleteAlbum
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Record is found and deleted
        '400':
          description: Bad request
        '404':
          description: Album was not found
      tags:
        - album
  /artist:
    get:
      operationId: ArtistController_getAll
      parameters: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artist'
            
      tags:
        - artist
    post:
      operationId: ArtistController_createArtist
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateArtistDto'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad request. Body does not contain required fields
      tags:
        - artist
  /artist/{id}:
    get:
      operationId: ArtistController_getById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad request. id must be a UUID
        '404':
          description: Artist was not found
      tags:
        - artist
    put:
      operationId: ArtistController_updateArtist
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateArtistDto'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad request. Body does not contain required fields
        '404':
          description: Record with id === artistId does not exist
      tags:
        - artist
    delete:
      operationId: ArtistController_deleteArtist
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Record is found and deleted
        '400':
          description: Bad request
        '404':
          description: Artist was not found
      tags:
        - artist
  /track:
    get:
      operationId: TrackController_getAll
      parameters: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track'
      tags:
        - track
    post:
      operationId: TrackController_createTrack
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTrackDto'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
        '400':
          description: >-
            Bad request. Body does not contain required fields or Artist or
            Album were not found
      tags:
        - track
  /track/{id}:
    get:
      operationId: TrackController_getById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad request. id must be a UUID
        '404':
          description: Track was not found
      tags:
        - track
    put:
      operationId: TrackController_updateTrack
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTrackDto'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
        '400':
          description: >-
            Bad request. Body does not contain required fields or Artist or
            Album were not found
        '404':
          description: Record with id === trackId does not exist
      tags:
        - track
    delete:
      operationId: TrackController_deleteAlbum
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Record is found and deleted
        '400':
          description: Bad request
        '404':
          description: Track was not found
      tags:
        - track
  /user:
    get:
      operationId: UserController_getAll
      parameters: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
      tags:
        - user
    post:
      operationId: UserController_createUser
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad request. Body does not contain required fields
      tags:
        - user
  /user/{id}:
    get:
      operationId: UserController_getById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad request. id must be a UUID
        '404':
          description: User was not found
      tags:
        - user
    put:
      operationId: UserController_updateUser
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad request. Body does not contain required fields
        '404':
          description: Record with id === userId does not exist
      tags:
        - user
    delete:
      operationId: UserController_deleteAlbum
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Record is found and deleted
        '400':
          description: Bad request
        '404':
          description: User was not found
      tags:
        - user
  /favs:
    get:
      operationId: FavoritesController_getAll
      parameters: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
      tags:
        - favs
  /favs/artist/{id}:
    post:
      operationId: FavoritesController_addFavsArtist
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
            format: uuid
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad request. id must be a UUID
        '422':
          description: Artist was not found
      tags:
        - favs
    delete:
      operationId: FavoritesController_deleteFavsArtist
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Record is found and deleted
        '400':
          description: Bad request
        '404':
          description: Artist was not found
      tags:
        - favs
  /favs/album/{id}:
    post:
      operationId: FavoritesController_addFavsAlbum
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
            format: uuid
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad request. id must be a UUID
        '422':
          description: Album was not found
      tags:
        - favs
    delete:
      operationId: FavoritesController_deleteFavsAlbum
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Record is found and deleted
        '400':
          description: Bad request
        '404':
          description: Album was not found
      tags:
        - favs
  /favs/track/{id}:
    post:
      operationId: FavoritesController_addFavsTrack
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
            format: uuid
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad request. id must be a UUID
        '422':
          description: Track was not found
      tags:
        - favs
    delete:
      operationId: FavoritesController_deleteFavsTrack
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Record is found and deleted
        '400':
          description: Bad request
        '404':
          description: Track was not found
      tags:
        - favs
